// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace UDC.Features.DoFeatures
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ValidateAddComparisionQuoteDataShouldMatchFromQuickQuote")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    [NUnit.Framework.CategoryAttribute("External")]
    public partial class ValidateAddComparisionQuoteDataShouldMatchFromQuickQuoteFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "External"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features/DoFeatures", "ValidateAddComparisionQuoteDataShouldMatchFromQuickQuote", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "ValidateAddComparisionQuoteDataShouldMatchFromQuickQuote.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate Add Comparision Quote Data Should Match From Quick Quote")]
        [NUnit.Framework.CategoryAttribute("sanity")]
        [NUnit.Framework.TestCaseAttribute("deepak.paramanick", "Happywork@1212", "CSA-B-Assigned", "CSA Business - Equipment Dealer", null)]
        [NUnit.Framework.TestCaseAttribute("deepak.paramanick", "Happywork@1212", "CSA-B-Assigned", "CSA Business - MV Dealer", null)]
        [NUnit.Framework.TestCaseAttribute("deepak.paramanick", "Happywork@1212", "CSA-C-Assigned", "CSA Personal - Equipment Dealer", null)]
        [NUnit.Framework.TestCaseAttribute("deepak.paramanick", "Happywork@1212", "CSA-C-Assigned", "CSA Personal - MV Dealer", null)]
        [NUnit.Framework.TestCaseAttribute("deepak.paramanick", "Happywork@1212", "CSA-B-Direct Fixed", "Webform - CSA Business - RA Dealer", null)]
        [NUnit.Framework.TestCaseAttribute("deepak.paramanick", "Happywork@1212", "CSA-B-Direct Fixed", "Webform - CSA Business - Direct", null)]
        [NUnit.Framework.TestCaseAttribute("deepak.paramanick", "Happywork@1212", "CSA-B-Direct Fixed", "Webform - CSA Business - EQ Dealer", null)]
        [NUnit.Framework.TestCaseAttribute("deepak.paramanick", "Happywork@1212", "CSA-C-Direct Fixed", "Webform - CSA Personal - EQ Dealer", null)]
        [NUnit.Framework.TestCaseAttribute("deepak.paramanick", "Happywork@1212", "CSA-C-Direct Fixed", "Webform - CSA Personal - MV Dealer", null)]
        public async global::System.Threading.Tasks.Task ValidateAddComparisionQuoteDataShouldMatchFromQuickQuote(string username, string password, string product, string program, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "sanity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Username", username);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("Program", program);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validate Add Comparision Quote Data Should Match From Quick Quote", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
 await testRunner.ThenAsync("the user is land on the Select Application page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 8
 await testRunner.WhenAsync("the user clicks the Quotes & Application button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 9
 await testRunner.ThenAsync("the user is redirected to dashboard page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 10
 await testRunner.WhenAsync("the user selects the Dealer dropdown in the dashboard page", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 11
 await testRunner.AndAsync("the user clicks the Create Quick Quote button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 12
 await testRunner.AndAsync(string.Format("the user selects product \"{0}\" in the dropdown", product), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 13
 await testRunner.AndAsync(string.Format("the user selects program \"{0}\" in the dropdown", program), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 14
 await testRunner.ThenAsync("the user validate the cash price by default value", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 15
 await testRunner.AndAsync("the user validate the cash price field error message", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 16
 await testRunner.AndAsync("the user validate the Interest rate filed error message", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
 await testRunner.WhenAsync("the user enters the cash price in the field", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 19
 await testRunner.AndAsync("the user enters Interest rate in the filed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 20
 await testRunner.AndAsync("the user selects the \"Term\" in the term dropdown", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 21
 await testRunner.AndAsync("the user selects the \"<Frequency>\" in the dropdown", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 22
 await testRunner.AndAsync("the user clicks the Calculate button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 23
 await testRunner.ThenAsync("after the hit calculation button then AddcomparisonTwo is enabled", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 24
 await testRunner.AndAsync("the Second Quote data should match the first quote", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 25
 await testRunner.WhenAsync("the user modifies the second quote\'s fields", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 26
 await testRunner.AndAsync("the user enter the cash price in the field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 27
 await testRunner.AndAsync("the user enter Interest rate in the filed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 28
 await testRunner.AndAsync("the user click the Calculation button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 29
 await testRunner.ThenAsync("After the Clicking Calculation button then AddcomparisonThree is enabled", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 30
 await testRunner.AndAsync("the third quote data should match the second quote", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate the Calculate For Dropdown")]
        [NUnit.Framework.CategoryAttribute("sanity")]
        [NUnit.Framework.TestCaseAttribute("deepak.paramanick", "Happywork@1212", "CSA-B-Assigned", "CSA Business - Equipment Dealer", null)]
        public async global::System.Threading.Tasks.Task ValidateTheCalculateForDropdown(string username, string password, string product, string program, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "sanity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Username", username);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("Program", program);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Validate the Calculate For Dropdown", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 52
 await testRunner.ThenAsync("the user is land on the Select Application page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 53
 await testRunner.WhenAsync("the user clicks the Quotes & Application button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 54
 await testRunner.ThenAsync("the user is redirected to dashboard page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 55
 await testRunner.WhenAsync("the user selects the Dealer dropdown in the dashboard page", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 56
 await testRunner.AndAsync("the user clicks the Create Quick Quote button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 57
 await testRunner.AndAsync(string.Format("the user selects product \"{0}\" in the dropdown", product), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 58
 await testRunner.AndAsync(string.Format("the user selects program \"{0}\" in the dropdown", program), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 59
 await testRunner.AndAsync("the user enters the cash price in the field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 60
 await testRunner.AndAsync("the user enter the balloon percentage in the field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 61
 await testRunner.AndAsync("the user clicks the Calculate button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 63
 await testRunner.ThenAsync("after the hit calculation button then AddcomparisonTwo is enabled", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 64
 await testRunner.AndAsync("the Second Quote data should match the first quote", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 66
 await testRunner.WhenAsync("the user modifies the second quote\'s fields", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 67
 await testRunner.AndAsync("the user click the Calculation button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 68
 await testRunner.AndAsync("the user selects the Calculate For dropdown", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 69
 await testRunner.AndAsync("the user enter the cash price in the field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 70
 await testRunner.AndAsync("the user enters the deposit in the field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 71
 await testRunner.ThenAsync("the user validate the balloon Amount is read only before clicking calculation", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 74
 await testRunner.ThenAsync("the user verify balloon Amount before and after calculation", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 75
 await testRunner.AndAsync("After the Clicking Calculation button then AddcomparisonThree is enabled", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 76
 await testRunner.AndAsync("the third quote data should match the second quote", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 78
 await testRunner.WhenAsync("the user selects the Calculate For dropdown in the Quote three", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 81
 await testRunner.ThenAsync("the user validate the cash price is read only before clicking calculation", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 82
 await testRunner.WhenAsync("the user enter the balloon percentage in the field", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 84
 await testRunner.ThenAsync("the user verify cash price before and after calculation", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
