// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace UDC.Features.DoFeatures
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("StandardQuoteHappyPath")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    [NUnit.Framework.CategoryAttribute("External")]
    public partial class StandardQuoteHappyPathFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "External"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features/DoFeatures", "StandardQuoteHappyPath", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "StandardQuoteHappyPath.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Quick Quote and Standard Quote Happy Path")]
        [NUnit.Framework.TestCaseAttribute("deepak.paramanick", "Happywork@1212", "CSA-B-Assigned", "CSA Business - MV Dealer", null)]
        public async global::System.Threading.Tasks.Task QuickQuoteAndStandardQuoteHappyPath(string username, string password, string product, string program, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Username", username);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("Program", program);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Quick Quote and Standard Quote Happy Path", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 55
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 56
    await testRunner.ThenAsync("the user is land on the Select Application page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 57
 await testRunner.WhenAsync("the user clicks the Quotes & Application button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 58
 await testRunner.ThenAsync("the user is redirected to dashboard page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 59
 await testRunner.WhenAsync("the user selects the Dealer dropdown in the dashboard page", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 60
 await testRunner.AndAsync("the user clicks the Create Quick Quote button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 61
 await testRunner.AndAsync(string.Format("the user selects product \"{0}\" in the dropdown", product), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 62
 await testRunner.AndAsync(string.Format("the user selects program \"{0}\" in the dropdown", program), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 63
 await testRunner.ThenAsync("the user validate the cash price by default value", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 64
 await testRunner.AndAsync("the user validate the cash price field error message", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 65
 await testRunner.AndAsync("the user validate the Interest rate filed error message", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 66
 await testRunner.WhenAsync("the user enters the cash price in the field", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 68
 await testRunner.AndAsync("the user enters Interest rate in the filed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 69
 await testRunner.AndAsync("the user selects the \"Term\" in the term dropdown", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 70
 await testRunner.AndAsync("the user selects the \"<Frequency>\" in the dropdown", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 71
 await testRunner.AndAsync("the user clicks the Calculate button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 72
 await testRunner.ThenAsync("User Navigate to Asset Details Pages and click on Asset, Insurance & Trade-in Sum" +
                        "mary  button", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 73
    await testRunner.AndAsync("the suer clicks the Asset & Insurance summary  edit button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 74
    await testRunner.AndAsync("the user enter all mandatory fields in the Add Asset page", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 75
 await testRunner.ThenAsync("Asset & Insurance Summary popup should be display", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 76
    await testRunner.AndAsync("User clicks Calculate", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 77
 await testRunner.AndAsync("the user clicks the Key disclosure and clicks the next button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 78
    await testRunner.AndAsync("the user is redirected to customer details page", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 79
    await testRunner.WhenAsync("the user clicks the add borrower And guarantor button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 80
 await testRunner.AndAsync("the user enters the Trust in the field and clicks Search button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 81
 await testRunner.AndAsync("user click on Add New Customer Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 82
 await testRunner.ThenAsync("User Navigate to Trust Details page and entre Mandatory details and click on Next" +
                        " Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 83
 await testRunner.ThenAsync("User Navigate to Address Details page and entre Mandatory details and click on Ne" +
                        "xt Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 84
 await testRunner.AndAsync("user navigate to Contract Details page and click on submit button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 85
 await testRunner.AndAsync("the user clicks the check boxes in the Originator Declaration page then clicks th" +
                        "e Proceed button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 86
 await testRunner.AndAsync("Quote submission Message should display", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
